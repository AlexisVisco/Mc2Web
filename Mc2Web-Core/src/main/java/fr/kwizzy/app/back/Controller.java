package fr.kwizzy.app.back;

import com.google.gson.Gson;
import fr.kwizzy.app.Mc2Web;
import fr.kwizzy.app.webserver.Message;
import fr.kwizzy.app.model.Bean;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.scheduler.BukkitRunnable;
import org.json.JSONArray;
import org.json.JSONObject;
import spark.Request;
import spark.Response;

import javax.servlet.http.HttpServletResponse;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.FutureTask;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

/**
 * Created by Alexis on 04/02/2017.
 * French author.
 */

public class Controller
{

    protected static Gson gson = new Gson();
    private static final String SUCCESS = "success";

    private Request  req;
    private Response res;

    public Controller() {
        /*
        Automatically generated by a reflection method.
        */
    }

    /**
     * This inject the request and the response.
     *
     * @param req request
     * @param res response
     * @return the current controller.
     */
    Controller inject(Request req, Response res)
    {
        this.req = req;
        this.res = res;
        return this;
    }

    protected Result ok(ResultObj ro) {
        return new Result(ro);
    }

    protected Result ok(Function<ResultObj, ResultObj> ro) {
        return new Result(ro.apply(new ResultObj()));
    }

    protected Result ok(Function<ResultObj, ResultObj> ro, HttpStatus e) {
        return ok(ro.apply(new ResultObj()), e);
    }

    protected Result ok(ResultObj ro, HttpStatus e) {
        status(e.value());
        return new Result(ro);
    }

    protected Result badRequest() {return ok(c -> c.reject(Message.badRequest), HttpStatus.BAD_REQUEST);}

    protected boolean playerNull(Player p) {
        return p == null || !p.isOnline();
    }

    protected void synchronous(Action c) {
        new BukkitRunnable() {
            @Override
            public void run()
            {
                c.execute();
            }
        }.runTask(Mc2Web.getInstance());
    }

    protected static <T> T synchronous(Callable<T> callable, Supplier<T> failed) {
        FutureTask<T> task = new FutureTask<>(callable);
        Bukkit.getScheduler().runTask(Mc2Web.getInstance() ,task);
        try {
            return task.get();
        } catch (Exception e) {
            return failed.get();
        }
    }


    /********************
     REQUEST
    ********************/

    public Map<String, String> getUrlParams() {
        return req.params();
    }

    public String getUrlParam(String param) {
        return req.params(param);
    }

    public boolean paramUrlNullOEmpty(String param) {
        String s = getUrlParam(param);
        return (s == null || s.isEmpty());
    }

    public String url() {
        return req.url();
    }

    public String reqBody() {
        return req.body();
    }

    public String getPostParam(String queryParam) {
        return req.queryParams(queryParam);
    }

    public boolean paramPostNullOEmpty(String queryParam) {
        String s = getPostParam(queryParam);
        return (s == null || s.isEmpty());
    }

    public String[] getPostParamsValues(String queryParam) {
        return req.queryParamsValues(queryParam);
    }

    public Set<String> getPostParams() {
        return req.queryParams();
    }

    public String getHeader(String header) {
        return req.headers(header);
    }

    public Set<String> headers() {
        return req.headers();
    }

    public void session(String attribute, String value) {
        req.session().attribute(attribute, value);
    }

    public String session(String attribute) {
        return req.session().attribute(attribute);
    }

    public Set<String> sessions() {
        return req.attributes();
    }


    /********************
     RESPONSE
     ********************/

    public void status(int status)
    {
        res.status(status);
    }

    public void status(HttpStatus s)
    {
        res.status(s.value());
    }

    public int status()
    {
        return res.status();
    }

    public void body(String body)
    {
        res.body(body);
    }

    public String body()
    {
        return res.body();
    }

    public HttpServletResponse raw()
    {
        return res.raw();
    }

    public void redirect(String location)
    {
        res.redirect(location);
    }

    public void redirect(String location, int httpStatusCode)
    {
        res.redirect(location, httpStatusCode);
    }

    public void header(String header, String value)
    {
        res.header(header, value);
    }

    public void cookie(String name, String value)
    {
        res.cookie(name, value);
    }

    public void cookie(String name, String value, int maxAge)
    {
        res.cookie(name, value, maxAge);
    }

    public void cookie(String name, String value, int maxAge, boolean secured) {
        res.cookie(name, value, maxAge, secured);
    }

    public void cookie(String path, String name, String value, int maxAge, boolean secured, boolean httpOnly) {
        res.cookie(path, name, value, maxAge, secured, httpOnly);
    }

    public void removeCookie(String name) {
        res.removeCookie(name);
    }

}
