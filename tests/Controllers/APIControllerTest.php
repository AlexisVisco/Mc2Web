<?php
/*
 * Mc2WebLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace Mc2WebLib\Tests;

use Mc2WebLib\APIException;
use Mc2WebLib\Exceptions;
use Mc2WebLib\APIHelper;

class APIControllerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \Mc2WebLib\Controllers\APIController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass()
    {
        $client = new \Mc2WebLib\Mc2WebClient();
        self::$controller = $client->getClient();
    }

    /**
     * Setup test
     */
    protected function setUp()
    {
        $this->httpResponse = new HttpCallBackCatcher();
    }

    /**
     * Get all informations about the world
     */
    public function testWorldAll()
    {

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->getWorldAll();
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = null ;
        $headers['Date'] = null ;
        $headers['Server'] = null ;
        $headers['Transfer-Encoding'] = null ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, $this->httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{"data":[{"actualPlayers":0,"canGenerateStructures":true,"monstersSpawnLimit":70,"animalsAllowed":tr' .
                'ue,"pvp":true,"uuid":"19332d70-7d40-474e-9844-d9e85b962dde","animalsSpawnLimit":15,"difficulty":"EAS' .
                'Y","playersOnWorld":[],"seaLevel":64,"weatherDuration":90099,"maxHeight":256,"name":"world","environ' .
                'ement":"NORMAL","ticksPerAnimalSpawns":400,"ticksPerMonsterSpawns":1,"animalSpawnLimit":15,"ambientS' .
                'pawnLimit":15,"monstersAllowed":true},{"actualPlayers":0,"canGenerateStructures":true,"monstersSpawn' .
                'Limit":70,"animalsAllowed":true,"pvp":true,"uuid":"a089bd07-f259-411f-a25c-fbd3a4a03591","animalsSpa' .
                'wnLimit":15,"difficulty":"EASY","playersOnWorld":[],"seaLevel":64,"weatherDuration":0,"maxHeight":25' .
                '6,"name":"world_nether","environement":"NETHER","ticksPerAnimalSpawns":400,"ticksPerMonsterSpawns":1' .
                ',"animalSpawnLimit":15,"ambientSpawnLimit":15,"monstersAllowed":true},{"actualPlayers":0,"canGenerat' .
                'eStructures":true,"monstersSpawnLimit":70,"animalsAllowed":true,"pvp":true,"uuid":"d92f6ce2-24b9-43f' .
                '2-983e-153c92aa9ee6","animalsSpawnLimit":15,"difficulty":"EASY","playersOnWorld":[],"seaLevel":64,"w' .
                'eatherDuration":0,"maxHeight":256,"name":"world_the_end","environement":"THE_END","ticksPerAnimalSpa' .
                'wns":400,"ticksPerMonsterSpawns":1,"animalSpawnLimit":15,"ambientSpawnLimit":15,"monstersAllowed":tr' .
                'ue}],"success":true}',
                $this->httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }
}
